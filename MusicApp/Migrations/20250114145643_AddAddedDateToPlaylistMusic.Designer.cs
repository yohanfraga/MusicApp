// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicApp.Infra.Context;

#nullable disable

namespace MusicApp.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250114145643_AddAddedDateToPlaylistMusic")]
    partial class AddAddedDateToPlaylistMusic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicApp.Domain.Entities.Album", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint")
                        .HasColumnName("artist_id")
                        .HasColumnOrder(7);

                    b.Property<long?>("ArtistId1")
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("release_date")
                        .HasColumnOrder(6);

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ArtistId1");

                    b.ToTable("Album", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("join_date")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Artist", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.ArtistFollow", b =>
                {
                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint")
                        .HasColumnName("artist_id")
                        .HasColumnOrder(1);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<long?>("ArtistId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FollowDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("follow_date")
                        .HasColumnOrder(3);

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("ArtistId", "UserId");

                    b.HasIndex("ArtistId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("ArtistFollow", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Like", b =>
                {
                    b.Property<long>("MusicId")
                        .HasColumnType("bigint")
                        .HasColumnName("Music_id")
                        .HasColumnOrder(1);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("LikedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("like_date")
                        .HasColumnOrder(3);

                    b.Property<long?>("MusicId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("MusicId", "UserId");

                    b.HasIndex("MusicId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Like", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Music", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("release_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Music", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Playlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date")
                        .HasColumnOrder(4);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasColumnOrder(7);

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Playlist", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.PlaylistFollow", b =>
                {
                    b.Property<long>("PlaylistId")
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_id")
                        .HasColumnOrder(1);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("FollowDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("follow_date")
                        .HasColumnOrder(3);

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("PlaylistId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("PlaylistFollow", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.PlaylistMusic", b =>
                {
                    b.Property<long>("MusicId")
                        .HasColumnType("bigint")
                        .HasColumnName("music_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PlaylistId")
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("added_date")
                        .HasColumnOrder(3);

                    b.HasKey("MusicId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistMusic", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("join_date")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("User", "MusicApp");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Album", b =>
                {
                    b.HasOne("MusicApp.Domain.Entities.Artist", null)
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId1");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.ArtistFollow", b =>
                {
                    b.HasOne("MusicApp.Domain.Entities.Artist", null)
                        .WithMany("Follows")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId1");

                    b.HasOne("MusicApp.Domain.Entities.User", null)
                        .WithMany("ArtistFollows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Like", b =>
                {
                    b.HasOne("MusicApp.Domain.Entities.Music", null)
                        .WithMany("Likes")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.Music", "Music")
                        .WithMany()
                        .HasForeignKey("MusicId1");

                    b.HasOne("MusicApp.Domain.Entities.User", null)
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Music");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Music", b =>
                {
                    b.HasOne("MusicApp.Domain.Entities.Album", "Album")
                        .WithMany("Musics")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Playlist", b =>
                {
                    b.HasOne("MusicApp.Domain.Entities.User", null)
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.PlaylistFollow", b =>
                {
                    b.HasOne("MusicApp.Domain.Entities.Playlist", "Playlist")
                        .WithMany("Follows")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.User", null)
                        .WithMany("PlaylistFollows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Playlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.PlaylistMusic", b =>
                {
                    b.HasOne("MusicApp.Domain.Entities.Music", "Music")
                        .WithMany("Playlists")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MusicApp.Domain.Entities.Playlist", "Playlist")
                        .WithMany("Musics")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Music");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Album", b =>
                {
                    b.Navigation("Musics");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Follows");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Music", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.Playlist", b =>
                {
                    b.Navigation("Follows");

                    b.Navigation("Musics");
                });

            modelBuilder.Entity("MusicApp.Domain.Entities.User", b =>
                {
                    b.Navigation("ArtistFollows");

                    b.Navigation("Likes");

                    b.Navigation("PlaylistFollows");

                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
